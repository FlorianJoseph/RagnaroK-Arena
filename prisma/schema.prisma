datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model profile {
  id          Int           @id @default(autoincrement())
  user_id     String        @unique @default(uuid()) @db.Uuid
  email       String        @unique
  username    String?
  full_name   String?
  website     String?
  avatar_url  String?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  wallet      wallet[]
  participant participant[]
  members     members[]
  tournament  tournament[]
}

model wallet {
  id           Int           @id @default(autoincrement())
  user_id      String        @unique @db.Uuid
  user         profile       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  coins        Int           @default(0)
  tickets      Int           @default(0)
  balance      Decimal       @default(0.0)
  transactions transaction[]
}

model transaction {
  id         Int           @id @default(autoincrement())
  wallet_id  Int
  wallet     wallet        @relation(fields: [wallet_id], references: [id])
  amount     Decimal
  currency   currency_type
  created_at DateTime      @default(now())
}

model clan {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  members    members[] @relation("ClanMembers")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model members {
  id      Int     @id @default(autoincrement())
  clan_id Int
  clan    clan    @relation("ClanMembers", fields: [clan_id], references: [id])
  user_id String  @db.Uuid
  user    profile @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([user_id, clan_id])
  @@index([clan_id])
}

model game {
  id         Int            @id @default(autoincrement())
  nom        String
  categorie  categorie_type
  tournament tournament[]
}

model tournament {
  id            Int           @id @default(autoincrement())
  title         String
  organizer_id  String        @db.Uuid
  organizer     profile       @relation(fields: [organizer_id], references: [user_id], onDelete: Cascade)
  prix_entree   Int
  date          DateTime
  game_id       Int
  game          game          @relation(fields: [game_id], references: [id])
  participants  participant[]
  reward_type   reward_type
  reward_amount Int
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
}

model participant {
  id            Int        @id @default(autoincrement())
  user_id       String     @db.Uuid
  user          profile    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  tournament_id Int
  tournament    tournament @relation(fields: [tournament_id], references: [id])
  score         Int        @default(0)
  joined_at     DateTime   @default(now())
}

enum currency_type {
  coins
  tickets
  real_money
}

enum reward_type {
  coins
  tickets
  real_money
}

enum categorie_type {
  action
  aventure
  fps
  rpg
  strategie
  sport
  party_games
  simulation
  autre
}
