datasource db {
  provider = "postgresql"
  url      = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model profiles {
  id             Int            @id @default(autoincrement())
  user_id        String         @unique @db.Uuid
  email          String         @unique
  username       String?
  full_name      String?
  website        String?
  avatar_url     String?
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  xp             Int            @default(0)
  rank           String         @default("Novice")
  wallet         wallets[]
  participant    participants[]
  members        members[]
  tournament     tournaments[]
  matchAsPlayer1 matches[]      @relation("player1Match")
  matchAsPlayer2 matches[]      @relation("player2Match")
  matchAsWinner  matches[]      @relation("winnerMatch")
  match_results  results[]
}

model wallets {
  id           Int            @id @default(autoincrement())
  user_id      String         @unique @db.Uuid
  user         profiles       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  coins        Int            @default(0)
  tickets      Int            @default(0)
  balance      Decimal        @default(0.0)
  transactions transactions[]
}

model transactions {
  id         Int           @id @default(autoincrement())
  wallet_id  Int
  wallet     wallets       @relation(fields: [wallet_id], references: [id])
  amount     Decimal
  currency   currency_type
  created_at DateTime      @default(now())
}

model clans {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(100)
  members    members[] @relation("ClanMembers")
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model members {
  id      Int      @id @default(autoincrement())
  clan_id Int
  clan    clans    @relation("ClanMembers", fields: [clan_id], references: [id])
  user_id String   @db.Uuid
  user    profiles @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@unique([user_id, clan_id])
  @@index([clan_id])
}

model games {
  id         Int            @id @default(autoincrement())
  name       String
  image_url  String?
  category   categorie_type
  tournament tournaments[]
}

model tournaments {
  id            Int            @id @default(autoincrement())
  title         String
  organizer_id  String         @db.Uuid
  organizer     profiles       @relation(fields: [organizer_id], references: [user_id], onDelete: Cascade)
  prix_entree   Int
  date          DateTime
  game_id       Int
  game          games          @relation(fields: [game_id], references: [id])
  participants  participants[]
  reward_type   reward_type
  reward_amount Int
  format        format_type
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  bracket       brackets[]
  results       results[]
}

model participants {
  id            Int         @id @default(autoincrement())
  user_id       String      @db.Uuid
  user          profiles    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  tournament_id Int
  tournament    tournaments @relation(fields: [tournament_id], references: [id])
  score         Int         @default(0)
  joined_at     DateTime    @default(now())

  @@unique([user_id, tournament_id])
}

model brackets {
  id                Int         @id @default(autoincrement())
  tournament_id     Int
  tournament        tournaments @relation(fields: [tournament_id], references: [id], onDelete: Cascade)
  round_number      Int
  is_losers_bracket Boolean     @default(false)
  matches           matches[]
}

model matches {
  id         Int      @id @default(autoincrement())
  bracket_id Int
  bracket    brackets @relation(fields: [bracket_id], references: [id], onDelete: Cascade)

  player1_id String?   @db.Uuid
  player1    profiles? @relation("player1Match", fields: [player1_id], references: [user_id], onDelete: SetNull)

  player2_id String?   @db.Uuid
  player2    profiles? @relation("player2Match", fields: [player2_id], references: [user_id], onDelete: SetNull)

  winner_id String?   @db.Uuid
  winner    profiles? @relation("winnerMatch", fields: [winner_id], references: [user_id], onDelete: SetNull)

  round       Int
  match_index Int
}

model results {
  id            Int         @id @default(autoincrement())
  tournament_id Int
  tournament    tournaments @relation(fields: [tournament_id], references: [id])
  user_id       String      @db.Uuid
  user          profiles    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  kills         Int         @default(0)
  placement     Int         @default(0)
  score         Int         @default(0)
  played_at     DateTime    @default(now())

  @@unique([tournament_id, user_id])
}

enum format_type {
  single_elimination
  double_elimination
  free_for_all
}

enum currency_type {
  Pièces
  Tickets
  Euros
}

enum reward_type {
  Pièces
  Tickets
  Euros
}

enum categorie_type {
  FPS
  PartyGames
  Combat
}
